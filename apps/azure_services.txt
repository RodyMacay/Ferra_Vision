# apps/images/azure_services.py

import json
import requests
import openai
from django.conf import settings
from apps.images.utils.utils import load_material_prices, calculate_total_cost

def analyze_image(image_url):
    headers = {
        'Ocp-Apim-Subscription-Key': settings.AZURE_COMPUTER_VISION_KEY,
        'Content-Type': 'application/json'
    }
    params = {
        'visualFeatures': 'Description',
        'language': 'es'
    }
    data = {'url': image_url}

    try:
        response = requests.post(
            f"{settings.AZURE_COMPUTER_VISION_ENDPOINT}/vision/v3.2/analyze",
            headers=headers,
            params=params,
            json=data
        )
        response.raise_for_status()
        analysis = response.json()
        return analysis['description']['captions'][0]['text'] if analysis['description']['captions'] else "Descripción no disponible."
    except requests.exceptions.RequestException as e:
        print(f"Error al analizar la imagen con Azure Computer Vision: {e}")
        return "Descripción no disponible."

def process_image(image_url):
    basic_description = analyze_image(image_url)
    print(f"Descripción básica de Computer Vision: {basic_description}")

    openai.api_key = settings.AZURE_OPENAI_KEY
    openai.api_base = settings.AZURE_OPENAI_ENDPOINT
    openai.api_type = "azure"
    openai.api_version = "2024-05-01-preview"

    deployment_name = "gpt-35-turbo"

    prompt = (
        f"Basándote en la descripción: '{basic_description}', describe el objeto en la imagen y proporciona una guía paso a paso para construirlo. "
        f"Incluye los materiales específicos, sus cantidades, y las unidades, siguiendo este formato exacto en JSON:\n"
        f"{{\n"
        f"  \"Descripción General\": \"...\",\n"
        f"  \"Materiales Necesarios\": [\n"
        f"    {{\"Material\": \"...\", \"Cantidad\": ..., \"Unidad\": \"...\"}},\n"
        f"    {{\"Material\": \"...\", \"Cantidad\": ..., \"Unidad\": \"...\"}}\n"
        f"  ],\n"
        f"  \"Pasos de Construcción\": {{\n"
        f"    \"Paso 1\": \"...\",\n"
        f"    \"Paso 2\": \"...\"\n"
        f"  }},\n"
        f"  \"Información Adicional\": {{\n"
        f"    \"Tiempo Estimado\": \"...\",\n"
        f"    \"Costo Aproximado\": \"...\",\n"
        f"    \"Nivel de Dificultad\": \"...\"\n"
        f"  }}\n"
        f"}}\n"
        f"Por favor, asegúrate de que las cantidades de materiales sean específicas y en las unidades correctas."
    )

    try:
        response = openai.ChatCompletion.create(
            deployment_id=deployment_name,
            messages=[
                {"role": "system", "content": "Eres un asistente de inteligencia artificial que ayuda a los usuarios a crear descripciones estructuradas en formato de diccionario en JSON."},
                {"role": "user", "content": prompt},
            ],
            max_tokens=800,
            temperature=0.7,
            top_p=0.95,
            frequency_penalty=0,
            presence_penalty=0,
            stop=None,
        )
        response_content = response.choices[0].message['content'].strip()
        print("Respuesta completa de Azure OpenAI:", response_content)

        try:
            parsed_response = json.loads(response_content)
            return parsed_response
        except json.JSONDecodeError as e:
            print(f"Error al parsear JSON: {e}")
            return {}

    except openai.error.InvalidRequestError as e:
        print(f"Error: {e}")
        raise

def calculate_prices(construction_steps):
    """
    Calcula los precios basados en los materiales proporcionados en los pasos de construcción,
    utilizando el diccionario de precios cargado localmente.
    """
    try:
        materials = construction_steps.get("Materiales Necesarios", [])
        if not materials:
            print("No se encontraron materiales en los pasos de construcción.")
            return {"precios_individuales": {}, "precio_final": 0.0}

        # Cargar precios de materiales desde el archivo JSON
        total_cost_data = calculate_total_cost(materials)

        print(f"Precios calculados: {total_cost_data}")
        return total_cost_data

    except Exception as e:
        print(f"Error al calcular precios: {e}")
        return {"precios_individuales": {}, "precio_final": 0.0}
